# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sensor_pkg/lone_sensor.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class lone_sensor(genpy.Message):
  _md5sum = "d74951cd5ea9208665af447aa3c67759"
  _type = "sensor_pkg/lone_sensor"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int8 id
int64 fx
int64 fy
int64 fz
float64 abs
float64 yaw
float64 pitch
bool is_present
bool is_3D
"""
  __slots__ = ['id','fx','fy','fz','abs','yaw','pitch','is_present','is_3D']
  _slot_types = ['int8','int64','int64','int64','float64','float64','float64','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,fx,fy,fz,abs,yaw,pitch,is_present,is_3D

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(lone_sensor, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.fx is None:
        self.fx = 0
      if self.fy is None:
        self.fy = 0
      if self.fz is None:
        self.fz = 0
      if self.abs is None:
        self.abs = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.is_present is None:
        self.is_present = False
      if self.is_3D is None:
        self.is_3D = False
    else:
      self.id = 0
      self.fx = 0
      self.fy = 0
      self.fz = 0
      self.abs = 0.
      self.yaw = 0.
      self.pitch = 0.
      self.is_present = False
      self.is_3D = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_b3q3d2B().pack(_x.id, _x.fx, _x.fy, _x.fz, _x.abs, _x.yaw, _x.pitch, _x.is_present, _x.is_3D))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 51
      (_x.id, _x.fx, _x.fy, _x.fz, _x.abs, _x.yaw, _x.pitch, _x.is_present, _x.is_3D,) = _get_struct_b3q3d2B().unpack(str[start:end])
      self.is_present = bool(self.is_present)
      self.is_3D = bool(self.is_3D)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_b3q3d2B().pack(_x.id, _x.fx, _x.fy, _x.fz, _x.abs, _x.yaw, _x.pitch, _x.is_present, _x.is_3D))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 51
      (_x.id, _x.fx, _x.fy, _x.fz, _x.abs, _x.yaw, _x.pitch, _x.is_present, _x.is_3D,) = _get_struct_b3q3d2B().unpack(str[start:end])
      self.is_present = bool(self.is_present)
      self.is_3D = bool(self.is_3D)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b3q3d2B = None
def _get_struct_b3q3d2B():
    global _struct_b3q3d2B
    if _struct_b3q3d2B is None:
        _struct_b3q3d2B = struct.Struct("<b3q3d2B")
    return _struct_b3q3d2B
