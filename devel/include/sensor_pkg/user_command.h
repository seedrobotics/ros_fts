// Generated by gencpp from file sensor_pkg/user_command.msg
// DO NOT EDIT!


#ifndef SENSOR_PKG_MESSAGE_USER_COMMAND_H
#define SENSOR_PKG_MESSAGE_USER_COMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sensor_pkg
{
template <class ContainerAllocator>
struct user_command_
{
  typedef user_command_<ContainerAllocator> Type;

  user_command_()
    : calibrate(false)
    , setepoch(false)
    , epoch_sec()
    , epoch_msec()
    , diagnosis_request(false)
    , set_frequency(false)
    , frequency(0)
    , raw_string(false)
    , raw()  {
    }
  user_command_(const ContainerAllocator& _alloc)
    : calibrate(false)
    , setepoch(false)
    , epoch_sec(_alloc)
    , epoch_msec(_alloc)
    , diagnosis_request(false)
    , set_frequency(false)
    , frequency(0)
    , raw_string(false)
    , raw(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _calibrate_type;
  _calibrate_type calibrate;

   typedef uint8_t _setepoch_type;
  _setepoch_type setepoch;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _epoch_sec_type;
  _epoch_sec_type epoch_sec;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _epoch_msec_type;
  _epoch_msec_type epoch_msec;

   typedef uint8_t _diagnosis_request_type;
  _diagnosis_request_type diagnosis_request;

   typedef uint8_t _set_frequency_type;
  _set_frequency_type set_frequency;

   typedef int8_t _frequency_type;
  _frequency_type frequency;

   typedef uint8_t _raw_string_type;
  _raw_string_type raw_string;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _raw_type;
  _raw_type raw;





  typedef boost::shared_ptr< ::sensor_pkg::user_command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor_pkg::user_command_<ContainerAllocator> const> ConstPtr;

}; // struct user_command_

typedef ::sensor_pkg::user_command_<std::allocator<void> > user_command;

typedef boost::shared_ptr< ::sensor_pkg::user_command > user_commandPtr;
typedef boost::shared_ptr< ::sensor_pkg::user_command const> user_commandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensor_pkg::user_command_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensor_pkg::user_command_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensor_pkg::user_command_<ContainerAllocator1> & lhs, const ::sensor_pkg::user_command_<ContainerAllocator2> & rhs)
{
  return lhs.calibrate == rhs.calibrate &&
    lhs.setepoch == rhs.setepoch &&
    lhs.epoch_sec == rhs.epoch_sec &&
    lhs.epoch_msec == rhs.epoch_msec &&
    lhs.diagnosis_request == rhs.diagnosis_request &&
    lhs.set_frequency == rhs.set_frequency &&
    lhs.frequency == rhs.frequency &&
    lhs.raw_string == rhs.raw_string &&
    lhs.raw == rhs.raw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensor_pkg::user_command_<ContainerAllocator1> & lhs, const ::sensor_pkg::user_command_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensor_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sensor_pkg::user_command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor_pkg::user_command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_pkg::user_command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_pkg::user_command_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_pkg::user_command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_pkg::user_command_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensor_pkg::user_command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "07453c0ab726c6f2c228b4f0e11711ec";
  }

  static const char* value(const ::sensor_pkg::user_command_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x07453c0ab726c6f2ULL;
  static const uint64_t static_value2 = 0xc228b4f0e11711ecULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor_pkg::user_command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor_pkg/user_command";
  }

  static const char* value(const ::sensor_pkg::user_command_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensor_pkg::user_command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool calibrate\n"
"bool setepoch\n"
"string epoch_sec\n"
"string epoch_msec\n"
"bool diagnosis_request\n"
"bool set_frequency\n"
"int8 frequency\n"
"bool raw_string\n"
"string raw\n"
;
  }

  static const char* value(const ::sensor_pkg::user_command_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensor_pkg::user_command_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.calibrate);
      stream.next(m.setepoch);
      stream.next(m.epoch_sec);
      stream.next(m.epoch_msec);
      stream.next(m.diagnosis_request);
      stream.next(m.set_frequency);
      stream.next(m.frequency);
      stream.next(m.raw_string);
      stream.next(m.raw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct user_command_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor_pkg::user_command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensor_pkg::user_command_<ContainerAllocator>& v)
  {
    s << indent << "calibrate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.calibrate);
    s << indent << "setepoch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.setepoch);
    s << indent << "epoch_sec: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.epoch_sec);
    s << indent << "epoch_msec: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.epoch_msec);
    s << indent << "diagnosis_request: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.diagnosis_request);
    s << indent << "set_frequency: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_frequency);
    s << indent << "frequency: ";
    Printer<int8_t>::stream(s, indent + "  ", v.frequency);
    s << indent << "raw_string: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.raw_string);
    s << indent << "raw: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.raw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_PKG_MESSAGE_USER_COMMAND_H
